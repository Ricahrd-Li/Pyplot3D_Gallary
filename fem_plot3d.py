# Ref：https://matplotlib.org/stable/gallery/images_contours_and_fields/triplot_demo.html
# Ref: https://towardsdatascience.com/simple-example-of-2d-density-plots-in-python-83b83b934f67
import matplotlib.pyplot as plt  
import numpy as np 

# 设置图片的大小和轴
fig = plt.figure(figsize=(13, 7))
ax = plt.axes(projection='3d')

# 在这里给出（三角形）网格的顶点
xy = np.asarray([ 
    [-0.101, 0.872], [-0.080, 0.883], [-0.069, 0.888], [-0.054, 0.890],
    [-0.045, 0.897], [-0.057, 0.895], [-0.073, 0.900], [-0.087, 0.898],
    [-0.090, 0.904], [-0.069, 0.907], [-0.069, 0.921], [-0.080, 0.919],
    [-0.073, 0.928], [-0.052, 0.930], [-0.048, 0.942], [-0.062, 0.949],
    [-0.054, 0.958], [-0.069, 0.954], [-0.087, 0.952], [-0.087, 0.959],
    [-0.080, 0.966], [-0.085, 0.973], [-0.087, 0.965], [-0.097, 0.965],
    [-0.097, 0.975], [-0.092, 0.984], [-0.101, 0.980], [-0.108, 0.980],
    [-0.104, 0.987], [-0.102, 0.993], [-0.115, 1.001], [-0.099, 0.996],
    [-0.101, 1.007], [-0.090, 1.010], [-0.087, 1.021], [-0.069, 1.021],
    [-0.052, 1.022], [-0.052, 1.017], [-0.069, 1.010], [-0.064, 1.005],
    [-0.048, 1.005], [-0.031, 1.005], [-0.031, 0.996], [-0.040, 0.987],
    [-0.045, 0.980], [-0.052, 0.975], [-0.040, 0.973], [-0.026, 0.968],
    [-0.020, 0.954], [-0.006, 0.947], [ 0.003, 0.935], [ 0.006, 0.926],
    [ 0.005, 0.921], [ 0.022, 0.923], [ 0.033, 0.912], [ 0.029, 0.905],
    [ 0.017, 0.900], [ 0.012, 0.895], [ 0.027, 0.893], [ 0.019, 0.886],
    [ 0.001, 0.883], [-0.012, 0.884], [-0.029, 0.883], [-0.038, 0.879],
    [-0.057, 0.881], [-0.062, 0.876], [-0.078, 0.876], [-0.087, 0.872],
    [-0.030, 0.907], [-0.007, 0.905], [-0.057, 0.916], [-0.025, 0.933],
    [-0.077, 0.990], [-0.059, 0.993]])

# 在这里给出（三角形）网格的连接关系，每一行为节点的下标
triangles = np.asarray([
    [67, 66,  1], [65,  2, 66], [ 1, 66,  2], [64,  2, 65], [63,  3, 64],
    [60, 59, 57], [ 2, 64,  3], [ 3, 63,  4], [ 0, 67,  1], [62,  4, 63],
    [57, 59, 56], [59, 58, 56], [61, 60, 69], [57, 69, 60], [ 4, 62, 68],
    [ 6,  5,  9], [61, 68, 62], [69, 68, 61], [ 9,  5, 70], [ 6,  8,  7],
    [ 4, 70,  5], [ 8,  6,  9], [56, 69, 57], [69, 56, 52], [70, 10,  9],
    [54, 53, 55], [56, 55, 53], [68, 70,  4], [52, 56, 53], [11, 10, 12],
    [69, 71, 68], [68, 13, 70], [10, 70, 13], [51, 50, 52], [13, 68, 71],
    [52, 71, 69], [12, 10, 13], [71, 52, 50], [71, 14, 13], [50, 49, 71],
    [49, 48, 71], [14, 16, 15], [14, 71, 48], [17, 19, 18], [17, 20, 19],
    [48, 16, 14], [48, 47, 16], [47, 46, 16], [16, 46, 45], [23, 22, 24],
    [21, 24, 22], [17, 16, 45], [20, 17, 45], [21, 25, 24], [27, 26, 28],
    [20, 72, 21], [25, 21, 72], [45, 72, 20], [25, 28, 26], [44, 73, 45],
    [72, 45, 73], [28, 25, 29], [29, 25, 31], [43, 73, 44], [73, 43, 40],
    [72, 73, 39], [72, 31, 25], [42, 40, 43], [31, 30, 29], [39, 73, 40],
    [42, 41, 40], [72, 33, 31], [32, 31, 33], [39, 38, 72], [33, 72, 38],
    [33, 38, 34], [37, 35, 38], [34, 38, 35], [35, 37, 36]])

x = xy[:,0] # 取x轴方向的节点的坐标
y = xy[:,1] # 取y轴方向的节点的坐标
xmin, xmax = np.min(x), np.max(x) # 取x轴方向的节点的最小 & 最大坐标
ymin, ymax = np.min(y), np.max(y) # 取y轴方向的节点的最小 & 最大坐标

ax.triplot(x, y, triangles, 'go-', lw=1.0) # 画出平面三角形网格, 'go-'是green & marker=o & line=-, lw是线宽

grid_x, grid_y = np.mgrid[xmin:xmax:50j, ymin:ymax:50j]  # 定义一个用于绘制3d曲面的网格

# 换成你的插值函数，这里只是一个简单的例子： f = sum(w1*10 + w2*10 + ... + wn*10), 
# 输入的(px,py)是单个点的坐标
def interpolate(p_x, p_y): 
    distance_x = x - p_x
    distance_y = y - p_y 
    w = distance_x ** 2 + distance_y ** 2
    return 10 * np.sum(1 / (w+1e-4))

func = np.vectorize(interpolate) # 这是一个对numpy数组每一个元素进行interpolate计算的函数
f = func(grid_x, grid_y) # 对numpy数组每一个元素进行interpolate计算，得到函数值array

f += np.abs(np.min(f)) # 这是一个平移操作，目的是让之前绘制的平面三角形网格位于画面最底端

### 可选样式1. 绘制线框模式 ### 
surf = ax.plot_wireframe(grid_x, grid_y, f) 

### 可选样式2. 绘制3d曲面 ### 
# rstride和cstride是绘图时采样的步长，cmap是颜色的样式，edgecolor='none'表示不绘制边，alpha是曲面透明度
# surf = ax.plot_surface(grid_x, grid_y, f, rstride=1, cstride=1, cmap='coolwarm', edgecolor='none', alpha=0.5)  
# fig.colorbar(surf, shrink=0.5, aspect=5) # 增加颜色条，线框模式下没用

ax.set_xlabel('x') # 设置x轴坐标名称
ax.set_ylabel('y') # 设置y轴坐标名称
ax.set_zlabel('f value') # 设置z轴坐标名称

ax.set_title('Wireframe plot of my FEM hw'); # 图片标题

plt.show() # 展示图片
